#!/bin/bash

################################################
# THIS FILE IS NO LONGER MAINTAINED
# PLEASE USE
#  feature-dev-shared-scripts/devtools-cli
################################################

################################################
################## VARIABLES ###################
################################################
# $DI_WP_DOCKER is sourced in this docker directory's bin/.bashenv
# $DI_WP_DIR is sourced in this docker directory's bin/.bashenv
COMMAND="$(basename "$0")"
DT="$DI_WP_DIR/dealer-inspire/wp-content/themes/DealerInspireDealerTheme"
DOCKER_COMPOSE_FILE="$DI_WP_DOCKER/docker-compose.yml"

# Colors
RED='\033[1;31m'
YELLOW='\033[1;33m'
BLUE='\033[1;36m'
NC='\033[0m'

# using the extra file instead of passing the parameters on the command line supresses warnings about using a password on cli
mysqlconnect="mysql --defaults-extra-file=$DI_WP_DOCKER/bin/.docker.sql.cnf"

################################################
################## FUNCTIONS ###################
################################################
# Message functions
# yellow output
notify()
{
    printf "${YELLOW}${1}${NC}\n"
}

# red output
error()
{
    printf "${RED}${1}${NC}\n"
}

# blue output
success()
{
    printf "${BLUE}${1}${NC}\n"
}

# Checkout dealer theme branch
checkout_dealer_theme()
{
    clean_hg_changes

    notify "Checking out $BRANCH"
    hg -R $DT pull
    hg -R $DT up $BRANCH
    success "Checked out $BRANCH"
}

# Check for uncommitted changes, and prompt to clean if present
clean_hg_changes()
{
    # check if there's uncommitted changes
    hg -R $DT summary | grep -q 'commit: (clean)'
    local isclean=$?

    if [ $isclean -ne 0 ]; then
        error "There are uncommitted changes on dealer theme:"
        hg -R $DT status
        read -p "Discard changes and proceed? [Yn]" yn
        case $yn in
            "n" | "no" | "nope")
                exit
                ;;
            *)
                hg -R $DT up -C
                ;;
        esac
    fi
}

# Make sure the docker containers are running
docker_up()
{
    notify "Running docker-compose up - just to make sure it's running"
    docker-compose -f $DOCKER_COMPOSE_FILE up -d
    success "Docker container is running"
}

# Pull down the production database, and place in /tmp/backup.sql
pull_production_database()
{
    notify "Downloading Prod ${BRANCH} Database"

    PLATFORM="$OSTYPE"
    MACPLATFORM='darwin'
    if [ "$PLATFORM" = "$MACPLATFORM" ]; then
        DAY="$(date -v -1d +%A)"
    else
        DAY="$(date +%A  --date='1 day ago')"
    fi
    ssh awomeldorf@deploy.pod$POD.dealerinspire.com "cat /mnt/di_backup/daily/databases/${BRANCH}_${DAY}.sql.gz" > /tmp/backup.sql.gz
    success "Prod ${BRANCH} Database is downloaded"

    unzip_new_db_file
}

# Pull down the development database, and place in /tmp/backup.sql
pull_development_database()
{
    notify "Downloading Dev ${BRANCH} Database"

    ssh awomeldorf@a.dev.dealerinspire.com "cat /var/www/backups/daily/${BRANCH}_current.sql.gz" > /tmp/backup.sql.gz

    success "Downloading Dev ${BRANCH} Database"

    unzip_new_db_file
}

# Cleanup the DB file in /tmp
unzip_new_db_file()
{
    if [ -f /tmp/backup.sql ]; then
        rm /tmp/backup.sql
    fi
    gunzip /tmp/backup.sql.gz
    remove_definer_from_db
}

# If the definer is in the sql file, remove it so we import correctly
remove_definer_from_db()
{
    echo "Removing the definer line from the sql file"
    sed -i "" "/DEFINER/d" /tmp/backup.sql
    sed -i -e "s/SET \@\@SESSION\.SQL_LOG_BIN/-- SET \@\@SESSION\.SQL_LOG_BIN/g" /tmp/backup.sql
    sed -i -e "s/SET \@\@GLOBAL\.GTID_PURGED/-- SET \@\@GLOBAL\.GTID_PURGED/g" /tmp/backup.sql
    sed -i -e "s/SET \@MYSQLDUMP_TEMP_LOG_BIN/-- SET \@MYSQLDUMP_TEMP_LOG_BIN/g" /tmp/backup.sql
}

# Cleanup the DB Container, and insert the new sql file
insert_db()
{
    drop_existing_tables_and_views

    notify "Importing the new DB"
    dbSwitcher /tmp/backup.sql
    success "Imported the new DB"
}

# On production DB's, the DI user is not set for local environments
update_prod_user()
{
    notify "Updating the DI User"

    # Get the DB Prefix
    prefix=$(echo "SELECT REPLACE(TABLE_NAME, 'options', '') AS prefix FROM information_schema.TABLES WHERE TABLE_NAME LIKE 'wp%_options%' LIMIT 1" | $mysqlconnect -D information_schema | sed -n 2p)

    # Update password to `awesome1234`
    echo "UPDATE ${prefix}users SET user_pass='dbf131c6abe7d0b48490e22e0161c61d' WHERE ID = 1;" | $mysqlconnect -D dealerinspire_dev
    success "Updated the DI User: can now sign in with awesome1234"
}

# Get the POD number from dashboard
get_pod_from_dashboard()
{
    if [ ! -x "$(command -v jq)" ]; then
        error "Pod number can not be parsed from dashboard because the ${YELLOW}jq${RED} package is not installed"
        error "Run ${YELLOW}brew install jq${RED} to install"
        exit
    fi

    notify "Getting the pod number for $BRANCH from Dashboard"
    local url="https://dashboard.dealerinspire.com/api/v1/dealer/podnumber"
    POD="$(curl --get $url \
          --data branchName=${BRANCH} \
          --data-urlencode api_key=${DASH_API_KEY} \
          | jq -r '.pod')"

    # By now, there has to be a pod. Either it should've been set manually in the call to our script, or we
    # should've received it from dashboard. If it's still not set, then we're wasting our time pulling prod
    if [ -z "$POD" ]; then
        error "No pod number has been set. Try setting it manually as the third argument to ${COMMAND}"
        exit
    else
        success "Pod number $POD"
    fi
}

# Drop all views and tables from the database
drop_existing_tables_and_views()
{
    get_views_query="select table_name from information_schema.tables where table_schema = 'dealerinspire_dev' and table_type = 'VIEW'"
    get_tables_query="select table_name from information_schema.tables where table_schema = 'dealerinspire_dev' and table_type = 'BASE TABLE'"

    # drop views
    notify "Dropping existing SQL VIEWS"
    $mysqlconnect -D information_schema -e "${get_views_query}" -s | xargs -I "@@" $mysqlconnect -D dealerinspire_dev -e "DROP VIEW @@" -s
    success "Dropped VIEWS"

    # drop tables
    notify "Dropping existing SQL TABLES"
    $mysqlconnect -D information_schema -e "${get_tables_query}" -s | xargs -I "@@" $mysqlconnect -D dealerinspire_dev -e "DROP TABLE @@" -s
    success "Dropped TABLES"
}

################################################
################# AGGREGATORS ##################
################################################
pull_prod()
{
    notify "Pulling Production Environment"
    checkout_dealer_theme
    docker_up
    pull_production_database
    insert_db
    update_prod_user
}

pull_dev()
{
    notify "Pulling Development Environment"
    checkout_dealer_theme
    docker_up
    pull_development_database
    insert_db
}

################################################
#################### BEGIN #####################
################################################
usage="$(basename "$0") BRANCH [ENVIRONMENT [POD]] -- switch the dealertheme branch and database in the docker environment.

where:
    -h; --help  show this help text.
    BRANCH      REQUIRED.
                full branch name of the dealertheme branch you want to checkout.
    ENVIRONMENT OPTIONAL.
                which environment to checkout - dev or prod.
                accepts 'p', 'prod', or 'production'. anything else will checkout devleopment.
    POD         OPTIONAL when pulling production environment.
                Can be set explicitly here, but if not passed, will be queried from Dashboard.
                DI pod number where the live site lives. at time of writing, valid is 1-16.
                sorry, this program isn't smart enough yet to know which pod to use on its own."

if [ -z "$1" ] || [ "-h" == "$1" ] || [ "--help" == "$1" ]; then
    echo "$usage"
	exit 1
fi

BRANCH=$1
ENVIRONMENT=$2
POD=$3

case $ENVIRONMENT in
    "p" | "pod" | "prod" | "production")
        # Make sure we have a pod number.
        if [ -z "$POD" ]; then
            get_pod_from_dashboard
        fi

        pull_prod
        ;;
    *)
        pull_dev
        ;;
esac

success "Done"

